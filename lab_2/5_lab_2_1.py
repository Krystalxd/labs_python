import math


def sqrt_decomposition():
    while True:
        n = input('Введите размерность массива (P.S. Для выхода из программы введите слово "exit"): ')
        if n == "exit":  # Если пользователь захочет закончить выполнение программы, то он может ввести слово "exit"
            exit()
        while n.isalpha() or int(n) < 0:  # Проверка корректности ввода данных (Размер массива-неотрицательное, 
            # целое число) 
            n = input("Введите размерность массива: ")
        n = int(n)

        arr = []
        for i in range(n):  # Цикл для заполнения массива 
            arr.append(int(input("Введите элемент массива: ")))
        print(arr)

        b = input(
            "С какого элемента нужно найти сумму (P.S. Учитывайте, что нумерация элементов массива начинается с 0): ")
        if b == "exit":
            exit()
        while b.isalpha() or int(b) >= n or int(b) < 0:  # Проверка корректности ввода данных 
            b = input("С какого элемента нужно найти сумму (P.S. Учитывайте, что нумерация элементов массива "
                      "начинается с "
                      "0): ")
        b = int(b)

        c = input("До какого элемента (P.S. Учитывайте, что нумерация элементов массива начинается с 0): ")
        if c == "exit":
            exit()
        while c.isalpha() or int(c) < 0 or int(c) >= n:  # Проверка корректности ввода данных 
            c = input("До какого элемента (P.S. Учитывайте, что нумерация элементов массива начинается с 0): ")
        c = int(c)
        length = int(math.sqrt(n)) + 1  # Длина одного блока 
        z = [0] * length  # Массив для сумм
        n_b = b // length  # Номер блока, которому принадлежит нижняя граница 
        n_c = c // length  # Номер блока, которому принадлежит верхняя граница 
        result = 0  # Конечная сумма

        i = 0
        while i < n:  # Заполняем массив "z" суммами наших блоков 
            z[i // length] += arr[i] 
            i += 1

        if n_b == n_c:  # Случай, когда b и c в одном блоке 
            i = b
            while i <= c:
                result += arr[i]
                i += 1
        else:
            i = b
            while i < (n_b + 1) * length:  # Цикл для обработки левой границы множества, 
                result += arr[i]  # невходящей полностью в один из блоков 
                i += 1

            i = n_b + 1
            while i < n_c:  # Если часть множество принадлежит одному из блоков 
                result += z[i]
                i += 1

            i = n_c * length
            while i <= c:  # Цикл для обработки правой границы множества, 
                result += arr[i]  # невходящей полностью в один из блоков 
                i += 1
        print("Сумма элементов с ", b, "по", c, "равна: ", result)


def sqrt_from_file():  # Функция для чтения информации из файла 
    file = open("Считываемые данные.txt", "r")
    info = file.read()
    info = info.replace("[", " ")  # Заменяет квадратные скобки пробелами для дальнейшей работы 
    info = info.replace("]", " ")
    info = info.replace("\n", " ")  # Замена переходов на новую строку пробелами 
    info = info.replace(",", " ")  # Замена запятых на пробелы 
    info = info.split()
    array = info[:-2]
    amount = len(array)
    length = int(math.sqrt(amount)) + 1  # Длина одного блока 
    z = [0] * length  # Массив для сумм
    b = int(info[-2])
    c = int(info[-1])
    n_b = b // length  # Номер блока, которому принадлежит нижняя граница 
    n_c = c // length  # Номер блока, которому принадлежит верхняя граница 
    result = 0  # Конечная сумма

    i = 0
    while i < len(array):  # Заполняем массив "z" суммами наших блоков 
        z[i // length] += int(array[i])
        i += 1

    if n_b == n_c:  # Случай, когда b и c в одном блоке 
        i = b
        while i <= c:
            result += int(array[i])
            i += 1
    else:
        i = b
        while i < (n_b + 1) * length:  # Цикл для обработки левой границы множества, 
            result += int(array[i])  # невходящей полностью в один из блоков 
            i += 1

        i = n_b + 1
        while i < n_c:  # Если часть множество принадлежит одному из блоков 
            result += z[i]
            i += 1

        i = n_c * length
        while i <= c:  # Цикл для обработки правой границы множества, 
            result += int(array[i])  # невходящей полностью в один из блоков 
            i += 1
    print("Нужная вам сумма: ", result)


sqrt_from_file()
